{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2023-04-15T21:53:12.716Z",
    "end": "2023-04-15T21:53:12.937Z",
    "duration": 221,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "edd35d75-b0ab-4ddb-ad6a-80ff4c272b5e",
      "title": "",
      "fullFile": "cypress/e2e/produtos.cy.js",
      "file": "cypress/e2e/produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
          "title": "Testes da funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de Produtos",
              "fullTitle": "Testes da funcionalidade Produtos Deve validar contrato de Produtos",
              "timedOut": null,
              "duration": 64,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "441b28fb-7a25-4cf7-833d-44c229169c91",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Testes da funcionalidade Produtos Listar produtos",
              "timedOut": null,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'Produtos'\n}).then(response => {\n  //expect(response.body.produtos[2].nome).to.equal('Samsung 60 polegadas')\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(60);\n});",
              "err": {},
              "uuid": "ee975d03-14c9-498e-b937-ba193c917b3b",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produto",
              "fullTitle": "Testes da funcionalidade Produtos Cadastrar produto",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.request({\n  method: 'POST',\n  url: 'Produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 300,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "65df3692-b57f-4dfd-9b40-e81ae5ca9a81",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 17,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, 'Produto EBAC', 250, 'Descriçao do produto novo', 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "99f528dd-3f13-41fe-a88b-50a50a5c0fff",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto ja cadastrado",
              "fullTitle": "Testes da funcionalidade Produtos Deve editar um produto ja cadastrado",
              "timedOut": null,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `Produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": \"Produto editado \",\n      \"preco\": 100,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 100\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "f6c8ca83-1c78-4bf3-9d15-f7c24fbed212",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Testes da funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'Descriçao do produto novo', 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `Produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 200,\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": 300\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "97536eee-a3e5-4365-8bdf-34965fe4337a",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto previamente cadastrado",
              "fullTitle": "Testes da funcionalidade Produtos Deve deletar um produto previamente cadastrado",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 100000000)}`;\ncy.cadastrarProduto(token, produto, 250, 'Descriçao do produto novo', 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `Produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "ee9bc558-4de9-4b57-950d-bc9719722882",
              "parentUUID": "4fa8d1fe-b084-45af-9553-7f7acd18b5f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "441b28fb-7a25-4cf7-833d-44c229169c91",
            "ee975d03-14c9-498e-b937-ba193c917b3b",
            "65df3692-b57f-4dfd-9b40-e81ae5ca9a81",
            "99f528dd-3f13-41fe-a88b-50a50a5c0fff",
            "f6c8ca83-1c78-4bf3-9d15-f7c24fbed212",
            "97536eee-a3e5-4365-8bdf-34965fe4337a",
            "ee9bc558-4de9-4b57-950d-bc9719722882"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 205,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}